program := definitions

definitions :=
    | definitions [\n] definition
    | definition

definition :=
  | fn
  | type

param := 
| LID
| UID

// fn
fn_header := fn NAME params

fn :=
  | fn_header { Aadd }

params := 
    | params param
    | EMPTY

lowercaseParams :=
 | LID lowercaseParams
 | LID

 uppercaseParams :=
 | UID uppercaseParams
 | UID


// TYPE

type :=
    | TYPE UID EQUAL constructors

constructors :=
 | constructors , constructors
 | constructor

constructor :=
    | UID params(LIDS)

// expr
aComparison := 
| empty
| aAdd == aComparison
| aAdd != aComparison
| aAdd

aAdd := 
| aMUL + aAdd
| aMUL - aAdd
| aMUL >> aAdd
| aMUL << aAdd
| aMUL

aMul := 
| aOR * aMul
| aOR / aMul
| aOR % aMul
| aOR

aOr :=
| aAND \| aOr
| aAND

aAnd :=
  | app & aAnd
  | app ^ aAnd
  | app

app := 
| notableAppBase app
| notableAppBase

notableAppBase := 
 | !appBase
 | appBase

appBase :=
    | INT
    | LID
    | UID
    | LITERAL
    | ( aComparison )
    | case

case := 
    CASE aComparison branches 

branches :=
    | branch branches 
    | branch

branch
| PAT pattern => { aComparison }

pattern
| LID
| UID lowercaseParams


